{"version":3,"sources":["./src/app/channel.ts","./src/app/revision.service.ts","./src/environments/environment.ts","./src/app/progress-bar/progress-bar.component.ts","./src/app/progress-bar/progress-bar.component.html","./src/app/version.service.ts","./src/app/message.service.ts","./src/app/channel.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/navbar-row.html","./src/app/app.module.ts","./src/app/ver-gen/ver-gen.component.ts","./src/app/ver-gen/ver-gen.component.html","./src/app/message.ts","./src/app/job-history/job-history.component.ts","./src/app/job-history/job-history.component.html","./src/app/ver-register/ver-register.component.ts","./src/app/ver-register/ver-register.component.html","./src/app/ver-register/register-dialog.html","./src/main.ts","./$_lazy_route_resource lazy namespace object","./src/app/ver-file-explorer/ver-file-explorer.component.ts","./src/app/ver-file-explorer/ver-file-explorer.component.html"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Observer, Subscription, Subject } from 'rxjs';\nimport { WebSocketSubject } from 'rxjs/webSocket';\n\n\nexport class Channel<T> {\n\n    constructor(\n        private socket: WebSocketSubject<T>\n    ) { }\n\n    subscribe(observer: Observer<T>): Subscription {\n        return this.socket.subscribe(observer);\n    }\n\n    sendMsg(data: T): void {\n        this.socket.next(data);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Revision } from './revision';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RevisionService {\n\n    private revUrl = 'api/revisions';\n\n    constructor(private http: HttpClient) { }\n\n    getRevision(sn: string): Observable<Revision> {\n        const url = `${this.revUrl}/${sn}`;\n        return this.http.get<Revision>(url);\n    }\n\n    getRevisions(): Observable<Revision[]> {\n        return this.http.get<Revision[]>(this.revUrl);\n    }\n\n    getSomeRevs(sn: string | null, num: number): Observable<Revision[]> {\n        const url: string = sn != null ? `${this.revUrl}/${sn}/getSomeRevsFrom` :\n            `${this.revUrl}/getSomeRevs`;\n        const options = { params: { num: `${num}` } };\n        return this.http.get<Revision[]>(url, options);\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { MessageService } from '../message.service';\nimport { Message, QueryEvent } from '../message';\nimport { Job, Task } from '../job';\n\n\ninterface Job_flat {\n    unique_id: string;\n    jobid: string;\n    tasks: Task[];\n}\n\nconst JobInfors: Job[] = [\n    {\n        \"unique_id\": \"uid\",\n        \"jobid\": \"Job\",\n        \"tasks\": {\n            \"T\": {\n                \"taskid\": \"T1\", \"state\": \"P\"\n            }\n        }\n    }\n];\n\n\n@Component({\n    selector: 'app-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.component.css']\n})\nexport class ProgressBarComponent implements OnInit {\n\n    private notify_allow: boolean = false;\n    jobs: { [index: string]: Job } = {};\n    jobSource = JobInfors;\n    columnDisplay = ['Job', 'Tasks'];\n\n    constructor(private msg_service: MessageService) {\n        this.msg_service.register(\"job.msg\").subscribe(msg => {\n            this.job_state_message_handle(msg);\n        });\n    }\n\n    ngOnInit(): void {\n        /**\n         * Query current state from Master.\n         */\n        this.msg_service.sendMsg(new QueryEvent([\"processing\"]));\n\n        let subscribtion = this.msg_service.register(\"job.msg.batch\")\n            .subscribe(init_msg => {\n\n                // Subtype of message must a batch\n                if (init_msg.content.subtype != \"batch\") {\n                    console.log(\"ProgressBar init: receive error message\");\n                } else {\n                    // Correct message type\n                    for (let msg of init_msg.content.message) {\n                        this.job_state_message_handle_internal(msg);\n                    }\n\n                    subscribtion.unsubscribe();\n                    this.notify_allow = true;\n                }\n            });\n    }\n\n    job_state_message_handle(msg: Message): void {\n        // Component is not initiliazed,\n        // unable to process notify at this stage.\n        if (this.notify_allow === false) {\n            return;\n        }\n\n        this.job_state_message_handle_internal(msg);\n    }\n\n    job_state_message_handle_internal(msg: Message): void {\n        let content = msg.content;\n        let subtype: string;\n\n        // Corrupted by invalid format of message is\n        // not allowed.\n        try {\n            subtype = content['subtype'];\n\n            switch (subtype) {\n                case \"change\":\n                    this.job_state_message_change_handle(msg);\n                    break;\n                case \"fin\":\n                    this.job_state_message_fin_handle(msg);\n                    break;\n                case \"fail\":\n                    this.job_state_message_fail_handle(msg)\n                    break;\n                case \"info\":\n                    this.job_state_message_info_handle(msg);\n                    break;\n            }\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n\n    get_jobs(): Job_flat[] {\n        let job_flats: Job_flat[] = [];\n\n        for (let job of Object.values(this.jobs)) {\n            let job_f: Job_flat = {\n                \"unique_id\": job.unique_id,\n                \"jobid\": job.jobid,\n                \"tasks\": Object.values(job.tasks)\n            };\n            job_flats.push(job_f);\n        }\n\n        return job_flats;\n    }\n\n    is_task_success(task: Task): boolean {\n        return task.state == 'FIN';\n    }\n\n    is_task_fail(task: Task): boolean {\n        return task.state == 'FAIL';\n    }\n\n    job_state_message_info_handle(msg: Message): void {\n        let message: { [index: string]: any } = msg['content']['message'];\n        if (typeof message == 'undefined')\n            return\n\n        // Treat as a trivial job just drop it.\n        if (message[\"tasks\"].length == 0)\n            return;\n\n        // Build Task dictionary.\n        let tasks: { [index: string]: Task } = {};\n        for (let task of message[\"tasks\"]) {\n            tasks[task[0]] = { \"taskid\": task[0], \"state\": task[1] };\n        }\n\n        // Build Job.\n        let job: Job = {\n            \"unique_id\": message['unique_id'],\n            \"jobid\": message['jobid'],\n            \"tasks\": tasks\n        };\n\n        this.jobs[message['unique_id']] = job;\n    }\n\n    job_state_message_change_handle(msg: Message): void {\n        let content = msg['content']['message'];\n\n        let job = this.jobs[content['unique_id']];\n        if (typeof job == 'undefined')\n            return;\n\n        let task = job.tasks[content['taskid']];\n        if (typeof task == 'undefined')\n            return;\n\n        task.state = content['state'];\n    }\n\n    job_state_message_fin_handle(msg: Message): void {\n        let content = msg['content']['message'];\n        let unique_id: string = content['jobs'][0];\n\n        delete this.jobs[unique_id];\n    }\n\n    job_state_message_fail_handle(msg: Message): void {\n        let content = msg['content']['message'];\n        let unique_id: string = content['jobs'][0];\n\n        delete this.jobs[unique_id];\n\n    }\n}\n","<div id=\"ProgressBar\" class=\"mat-elevation-z1\">\n  <h3>ProgressBar</h3>\n\n  <mat-divider></mat-divider>\n  <div class=\"ProgressContent\">\n    <mat-list role=\"list\">\n      <mat-list-item role=\"listitem\" *ngFor=\"let job of get_jobs()\">\n        <span class=\"Uid\">\n          {{job.unique_id}}\n        </span>\n        <span class=\"Jobid\">\n          {{job.jobid}}\n        </span>\n        <div class=\"Tasks\">\n          <p class=\"Task\" *ngFor=\"let t of job.tasks\"\n             [ngStyle]=\"{ 'color': t.state == 'FIN' ? 'green' : (t.state == 'FAIL' ? 'red' : 'yellow')}\">\n            {{t.taskid}}\n          </p>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n\n</div>\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Version, VersionBuild } from './version';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class VersionService {\n\n    private verUrl = 'api/versions';\n\n    httpOptions = {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n    };\n\n    constructor(\n        private http: HttpClient\n    ) { }\n\n    getVersion(vsn: string): Observable<Version> {\n        const url = `${this.verUrl}/${vsn}/`;\n        return this.http.get<Version>(url);\n    }\n\n    getVersions(): Observable<Version[]> {\n        return this.http.get<Version[]>(`${this.verUrl}/`);\n    }\n\n    updateVersion(ver: Version): Observable<any> {\n        return this.http.put(`${this.verUrl}/`, ver, this.httpOptions);\n    }\n\n    removeVersion(vsn: string): Observable<Version> {\n        const url = `${this.verUrl}/${vsn}/`;\n        return this.http.delete<Version>(url, this.httpOptions);\n    }\n\n    addVersion(ver: Version): Observable<Version> {\n        return this.http.post<Version>(`${this.verUrl}/`, ver, this.httpOptions);\n    }\n\n    generate(build: VersionBuild): Observable<any> {\n        const genUrl = `${this.verUrl}/${build.ver.vsn}/generate/`;\n        return this.http.put(genUrl, build.info, this.httpOptions);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Message, message_check } from './message';\nimport { ChannelService } from \"./channel.service\";\nimport { Channel } from \"./channel\";\n\n\n\nclass MessageQueue {\n    private data: Message[] = [];\n\n    len(): number {\n        return this.data.length;\n    }\n\n    isFull(): boolean {\n        return this.len() > 0;\n    }\n\n    isEmpty(): boolean {\n        return this.len() == 0;\n    }\n\n    push(msg: Message): void {\n        this.data.push(msg);\n    }\n\n    pop(): Message {\n        return this.data.pop();\n    }\n\n    shift(): Message {\n        return this.data.shift();\n    }\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MessageService {\n\n    private sock_url = \"ws://localhost:8000/commu/\";\n\n    /**\n     * With Help of msg_queues MessageService able to\n     * provide messages that from server, to another\n     * components or services.\n     *\n     *  ---- message ---> MessageService ---> queue ---> component\n     */\n    private msg_queues: { [index: string]: MessageQueue } = {};\n    private channel: Channel<Object>;\n\n    constructor(private channelService: ChannelService) {\n        this.channel = this.channelService.create(this.sock_url);\n\n        this.channel.subscribe({\n            next: msg => {\n\n                if (message_check(msg) === false) {\n                    // invalid message\n                    return;\n                }\n\n                let message: Message = {\n                    \"type\": msg[\"type\"],\n                    \"content\": msg[\"content\"]\n                };\n                let msg_type: string = message.type;\n\n                // If type of thie message is subscribe then add it to\n                // correspond queue.\n                if (typeof this.msg_queues[msg_type] != 'undefined') {\n                    this.msg_queues[message.type].push(message);\n                }\n            },\n            error: err => {\n                console.log(err);\n            },\n            complete: () => {\n                console.log(\"complete\");\n            }\n        });\n    }\n\n    register(msg_type: string): Observable<Message> | null {\n        // To check that is this msg_type is unique.\n        if (typeof this.msg_queues[msg_type] == \"undefined\") {\n            this.msg_queues[msg_type] = new MessageQueue();\n        } else\n            return null;\n\n        return new Observable(msg_receiver => {\n            setInterval(() => {\n                let q: MessageQueue = this.msg_queues[msg_type];\n\n                while (!q.isEmpty()) {\n                    msg_receiver.next(q.shift());\n                }\n            }, 1000);\n        });\n    }\n\n    sendMsg(msg: Message): void {\n        this.channel.sendMsg(msg);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { Channel } from './channel';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ChannelService {\n\n    private channels: { [index: string]: WebSocketSubject<Object> } = {};\n    constructor() { }\n\n    create(url: string): Channel<Object> {\n        let socket: WebSocketSubject<Object>;\n\n        if (typeof this.channels[url] == 'undefined') {\n            // New channel\n            socket = webSocket(url);\n            this.channels[url] = socket;\n        } else {\n            // Exist channel\n            socket = this.channels[url];\n        }\n\n        return new Channel<Object>(socket);\n    }\n\n    close(url: string): void {\n        if (typeof this.channels[url] != 'undefined') {\n            this.channels[url].complete();\n        }\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n    title = 'VerManager-Front';\n}\n\n@Component({\n    selector: 'navbar-row',\n    templateUrl: './navbar-row.html',\n    styleUrls: ['./navbar-row.css']\n})\nexport class NavrowComponent { }\n","<navbar-row></navbar-row>\n<mat-drawer-container>\n  <mat-drawer mode=\"side\" opened>\n    SideBar\n  </mat-drawer>\n  <mat-drawer-content>\n    <div>\n      <div class=\"GenPanel\">\n        <app-ver-register></app-ver-register>\n        <app-ver-gen></app-ver-gen>\n        <app-progress-bar></app-progress-bar>\n        <app-job-history></app-job-history>\n        <app-ver-file-explorer></app-ver-file-explorer>\n      </div>\n    </div>\n  </mat-drawer-content>\n</mat-drawer-container>\n","<mat-toolbar class=\"mat-elevation-z5\" color=\"primary\">\n  Version Manager\n</mat-toolbar>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { VerGenComponent } from './ver-gen/ver-gen.component';\nimport { VerRegisterComponent, RegisterDialog } from './ver-register/ver-register.component';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\nimport { AppComponent, NavrowComponent } from './app.component';\nimport { MatListModule } from '@angular/material/list';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatTableModule } from '@angular/material/table';\nimport { JobHistoryComponent } from './job-history/job-history.component';\nimport { VerFileExplorerComponent } from './ver-file-explorer/ver-file-explorer.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        VerGenComponent,\n        VerRegisterComponent,\n        RegisterDialog,\n        ProgressBarComponent,\n        NavrowComponent,\n        JobHistoryComponent,\n        VerFileExplorerComponent,\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        HttpClientModule,\n        FormsModule,\n        MatListModule,\n        MatExpansionModule,\n        MatDialogModule,\n        MatButtonModule,\n        MatInputModule,\n        MatSelectModule,\n        MatGridListModule,\n        MatToolbarModule,\n        MatSidenavModule,\n        MatDividerModule,\n        MatTableModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { VersionService } from '../version.service';\nimport { RevisionService } from '../revision.service';\nimport { Version, VersionBuild, BuildInfo } from '../version';\nimport { Revision } from '../revision';\n\n\n@Component({\n    selector: 'app-ver-gen',\n    templateUrl: './ver-gen.component.html',\n    styleUrls: ['./ver-gen.component.css']\n})\nexport class VerGenComponent implements OnInit {\n\n    versions: Version[] = [];\n    revisions: Revision[] = [];\n\n    constructor(\n        private verService: VersionService,\n        private revService: RevisionService\n    ) { }\n\n    ngOnInit(): void {\n        this.verService.getVersions()\n            .subscribe(versions => this.versions = versions);\n        this.revService.getRevisions()\n            .subscribe(revisions => this.revisions = revisions);\n    }\n\n    generate(version: Version | undefined, ...infos: string[]): void {\n        let buildInfo: BuildInfo = {};\n\n        if (typeof version !== 'undefined') {\n\n            if (infos.length === 2) {\n                buildInfo = { logFrom: infos[0], logTo: infos[1] };\n            }\n\n            const build: VersionBuild = { ver: version, info: buildInfo };\n            this.verService.generate(build).subscribe();\n        }\n    }\n}\n","<div id=\"VerGenPanel\" class=\"mat-elevation-z2\">\n    <h3>Version Generate</h3>\n    <mat-divider></mat-divider>\n\n    <mat-list>\n      <mat-list-item>\n        <mat-form-field>\n          <mat-label>Version</mat-label>\n          <mat-select #SelectedVersion>\n            <mat-option *ngFor=\"let version of versions\" [value]=\"version\">\n              {{version.vsn}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-list-item>\n\n      <mat-list-item>\n        <mat-form-field>\n          <mat-label>Log from</mat-label>\n          <mat-select #logFrom>\n            <mat-option *ngFor=\"let revision of revisions\" [value]=\"revision.sn\">\n              {{revision.sn}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-list-item>\n\n      <mat-list-item>\n        <mat-form-field>\n          <mat-label>Log from</mat-label>\n          <mat-select #logTo>\n            <mat-option *ngFor=\"let revision of revisions\" [value]=\"revision.sn\">\n              {{revision.sn}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-list-item>\n\n      <mat-list-item>\n        <button id=\"genButton\" mat-flat-button color=\"primary\"\n                (click)=\"generate(SelectedVersion.value, logFrom.value, logTo.value)\">\n          Generate\n        </button>\n      </mat-list-item>\n    </mat-list>\n\n</div>\n","export interface Message {\n    type: string;\n    content: { [index: string]: any };\n}\n\nexport class QueryEvent implements Message {\n    type: string;\n    content: { [index: string]: any };\n\n    constructor(args: string[]) {\n        this.type = \"query\";\n        this.content = {\n            \"subtype\": \"JobMaster\",\n            \"message\": {\n                \"args\": args\n            }\n        };\n    }\n}\n\nexport function message_check(msg: any): boolean {\n    if (typeof msg == 'object') {\n        if (typeof msg['type'] != 'undefined' ||\n            typeof msg['content'] != 'undefined') {\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MessageService } from '../message.service';\nimport { Message, QueryEvent } from '../message';\nimport { Job, Task } from '../job';\n\n\n@Component({\n    selector: 'app-job-history',\n    templateUrl: './job-history.component.html',\n    styleUrls: ['./job-history.component.css']\n})\nexport class JobHistoryComponent implements OnInit {\n\n    history: Job[] = [];\n\n    constructor(private msg_service: MessageService) {\n        this.msg_service.register(\"job.msg.history\").subscribe(history_msg => {\n            this.history_msg_handle(history_msg);\n        })\n    }\n\n    ngOnInit(): void {\n        /**\n         * Observer to handle reply of this query is already\n         * subscribe on constructor.\n         */\n        this.msg_service.sendMsg(new QueryEvent([\"history\"]));\n    }\n\n    history_msg_handle(msg: Message): void {\n        if (msg.content['subtype'] != 'history') {\n            return;\n        }\n\n        for (let obj of Object.values(msg.content['message'])) {\n            let job: Job = {\n                \"unique_id\": obj['unique_id'],\n                \"jobid\": obj['jobid'],\n                \"tasks\": obj['tasks']\n            };\n            this.history.push(job);\n        }\n    }\n\n    job_tasks(job: Job): Task[] {\n        return Object.values(job.tasks);\n    }\n\n    is_task_success(task: Task): boolean {\n        return task.state == 'FIN';\n    }\n\n    is_task_fail(task: Task): boolean {\n        return task.state == \"FAIL\";\n    }\n}\n","<div id=\"JobHistory\" class=\"mat-elevation-z1\">\n  <h3>History</h3>\n  <mat-divider></mat-divider>\n\n  <div class=\"HistoryContent\">\n    <mat-list role=\"list\">\n      <mat-list-item class=\"Historyrow\" role=\"listitem\" *ngFor=\"let job of history\">\n        <span class=\"Uid\">{{job.unique_id}}</span>\n        <span class=\"Jobid\">{{job.jobid}}</span>\n        <div class=\"Tasks\">\n          <p class=\"Task\" *ngFor=\"let t of job_tasks(job)\"\n             [ngStyle]=\"{ 'color': is_task_success(t) ? 'green' : (is_task_fail(t) ? 'red' : 'yellow') }\">\n            {{t.taskid}}\n          </p>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { VersionService } from '../version.service';\nimport { RevisionService } from '../revision.service';\nimport { Version } from '../version';\nimport { Revision } from '../revision';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'app-ver-register',\n    templateUrl: './ver-register.component.html',\n    styleUrls: ['./ver-register.component.css']\n})\nexport class VerRegisterComponent implements OnInit {\n\n    versions: Version[] = [];\n    revisions: Revision[] = [];\n\n    lastScrollTop: number = 0;\n    revList: HTMLElement | null = null;\n\n    constructor(private verService: VersionService,\n        private revService: RevisionService,\n        private dialog: MatDialog) { }\n\n    ngOnInit(): void {\n        this.getVersions();\n        this.getSomeRevs(null, 20);\n    }\n\n    register(rev: string): void {\n        const ref = this.dialog.open(RegisterDialog, {\n            width: '250px'\n        });\n\n        ref.afterClosed().subscribe(result => {\n            if (result !== undefined) {\n                const ver: Version = { vsn: result, sn: rev };\n                this.verService.addVersion(ver)\n                    .subscribe();\n            }\n        });\n    }\n\n    remove(ver: Version): void {\n        this.verService.removeVersion(ver.vsn)\n            .subscribe();\n    }\n\n    getVersions(): void {\n        this.verService.getVersions()\n            .subscribe(versions => this.versions = versions);\n    }\n\n    getRevisions(): void {\n        this.revService.getRevisions()\n            .subscribe(revisions => this.revisions = revisions);\n    }\n\n    getSomeRevs(sn: string | null, num: number): void {\n        this.revService.getSomeRevs(sn, num)\n            .subscribe(revisions => this.revisions = this.revisions.concat(revisions));\n    }\n\n    logging(msg: string): void {\n        console.log(msg);\n    }\n\n    onScroll(event: any): void {\n        // visible height + pixel scrolled >= total height\n        if (event.target.offsetHeight + event.target.scrollTop >= event.target.scrollHeight) {\n            let lastSn: Revision = this.revisions[this.revisions.length - 1];\n            this.revService.getSomeRevs(lastSn.sn, 10)\n                .subscribe(revisions => {\n                    const height: number = event.target.scrollHeight;\n                    this.revisions = this.revisions.concat(revisions);\n                });\n        }\n    }\n}\n\n@Component({\n    selector: 'register-dialog',\n    templateUrl: 'register-dialog.html'\n})\nexport class RegisterDialog {\n\n    public version: string;\n\n    constructor(\n        public dialogRef: MatDialogRef<RegisterDialog>) { }\n\n    onCancel(): void {\n        this.dialogRef.close();\n    }\n}\n","<div id=\"RegPanel\" class=\"mat-elevation-z2\">\n  <h3 class=\"registerTitle\">Version Register</h3>\n  <mat-divider></mat-divider>\n\n  <mat-action-list id=\"revList\" (scroll)=\"onScroll($event)\">\n    <mat-list *ngFor=\"let revision of revisions\" class=\"mat-elevation-z2\">\n      <button class=\"revButton\" (click)=\"register(revision.sn)\">\n        <a>{{revision.comment | slice: 0:40}}</a>\n      </button>\n    </mat-list>\n  </mat-action-list>\n</div>\n","<h1 mat-dialog-title>Version Register</h1>\n<div mat-dialog-content>\n  <mat-form-field>\n    <p>Version Identity?</p>\n    <input matInput [(ngModel)]=\"version\">\n  </mat-form-field>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onCancel()\">No Thanks</button>\n  <button mat-button [mat-dialog-close]=\"version\">Ok</button>\n</div>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { Component, OnInit } from '@angular/core';\nimport { MessageService } from '../message.service';\nimport { VerResult } from './verResult';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Message, QueryEvent } from '../message';\n\n\n@Component({\n    selector: 'app-ver-file-explorer',\n    templateUrl: './ver-file-explorer.component.html',\n    styleUrls: ['./ver-file-explorer.component.css'],\n})\nexport class VerFileExplorerComponent implements OnInit {\n\n    results: { [index: string]: VerResult } = {};\n    constructor(\n        private msgService: MessageService,\n        private http: HttpClient\n    ) { }\n\n    ngOnInit(): void {\n        // Send an event to master to acquire already generated\n        // files.\n        this.msgService.sendMsg(new QueryEvent([\"files\"]));\n        this.msgService.register(\"job.msg.file.exists\").subscribe(msg => {\n            let message: Object = msg.content.message;\n\n            for (let idx in message) {\n                this.results[idx] = message[idx];\n            }\n\n            this.switchToGrowState();\n        });\n    }\n\n    switchToGrowState(): void {\n        this.msgService.register(\"job.msg.file.new\").subscribe(msg => {\n            let file: VerResult = msg.content.message;\n            let unique_id: string = file['unique_id'];\n\n            if (unique_id in this.results) {\n                return;\n            } else {\n                this.results[unique_id] = file;\n            }\n        });\n    }\n\n    files_dict(): { [index: string]: VerResult } {\n        return this.results;\n    }\n\n    files(): VerResult[] {\n        return Object.values(this.results);\n    }\n\n    retrieve_file(unique_id: string): void {\n        console.log(unique_id);\n        console.log(this.results[unique_id]);\n\n        if (unique_id in this.results) {\n            let result = this.results[unique_id];\n            window.open(result.url);\n        } else {\n            // Alert\n        }\n    }\n\n}\n","<div id=\"FileExplorer\" class=\"mat-elevation-z1\">\n  <h3>File Explorer</h3>\n  <mat-divider></mat-divider>\n\n  <div class=\"ExplorePanel\">\n    <mat-form-field>\n      <mat-label>Files</mat-label>\n      <mat-select #SelectedVersion>\n        <mat-option *ngFor=\"let result of files()\" [value]=\"result\">\n          {{result.unique_id}}:{{result.ver_id}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <button mat-flat-button color=\"primary\"\n            (click)=\"retrieve_file(SelectedVersion.value.unique_id)\">\n      Retrieve\n    </button>\n  </div>\n</div>\n"],"sourceRoot":"webpack:///"}