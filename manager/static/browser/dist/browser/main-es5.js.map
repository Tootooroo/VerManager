{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/navbar-row.html","webpack:///src/app/app.module.ts","webpack:///src/app/channel.service.ts","webpack:///src/app/message.service.ts","webpack:///src/app/message.ts","webpack:///src/app/progress-bar/progress-bar.component.ts","webpack:///src/app/progress-bar/progress-bar.component.html","webpack:///src/app/revision.service.ts","webpack:///src/app/ver-gen/ver-gen.component.ts","webpack:///src/app/ver-gen/ver-gen.component.html","webpack:///src/app/ver-register/ver-register.component.ts","webpack:///src/app/ver-register/ver-register.component.html","webpack:///src/app/ver-register/register-dialog.html","webpack:///src/app/version.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","NavrowComponent","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","ChannelService","channels","url","channel","complete","providedIn","MessageQueue","data","length","len","msg","push","pop","MessageService","sock","sock_url","socket","msg_queues","create","subscribe","message","msg_type","type","err","console","log","msg_receiver","setInterval","q","isEmpty","next","message_check","ProgressBarComponent","msg_service","jobs","register","job_state_message_handle","content","subtype","job_state_message_change_handle","job_state_message_fin_handle","job_state_message_fail_handle","job_state_message_info_handle","error","jobid","job","tasks","taskid","state","RevisionService","http","revUrl","sn","get","num","options","params","VerGenComponent","verService","revService","versions","revisions","getVersions","getRevisions","version","buildInfo","logFrom","logTo","build","ver","info","generate","VerRegisterComponent","dialog","lastScrollTop","revList","getSomeRevs","rev","ref","open","RegisterDialog","width","afterClosed","result","undefined","vsn","addVersion","removeVersion","concat","event","target","offsetHeight","scrollTop","scrollHeight","lastSn","height","onScroll","dialogRef","close","onCancel","VersionService","verUrl","httpOptions","headers","put","post","genUrl","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n    title = 'Version Manager';\n}\n\n@Component({\n    selector: 'navbar-row',\n    templateUrl: './navbar-row.html',\n    styleUrls: ['./navbar-row.css']\n})\nexport class NavrowComponent { }\n","<navbar-row></navbar-row>\n<div>\n  <div class=\"GenPanel\">\n    <app-ver-register></app-ver-register>\n    <app-ver-gen></app-ver-gen>\n  </div>\n  <app-progress-bar></app-progress-bar>\n</div>\n","<mat-toolbar class=\"mat-elevation-z5\" color=\"primary\">\n  Version Manager\n</mat-toolbar>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent, NavrowComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { VerGenComponent } from './ver-gen/ver-gen.component';\nimport { VerRegisterComponent, RegisterDialog } from './ver-register/ver-register.component';\nimport { MatListModule } from '@angular/material/list';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { FormsModule } from '@angular/forms';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        VerGenComponent,\n        RegisterDialog,\n        NavrowComponent,\n        VerRegisterComponent,\n        ProgressBarComponent\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        HttpClientModule,\n        FormsModule,\n        MatListModule,\n        MatExpansionModule,\n        MatDialogModule,\n        MatButtonModule,\n        MatInputModule,\n        MatSelectModule,\n        MatGridListModule,\n        MatToolbarModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ChannelService {\n\n    private channels: { [index: string]: WebSocketSubject<Object> } = {};\n    constructor() { }\n\n    create(url: string): Observable<Object> {\n        let channel: WebSocketSubject<Object>;\n\n        if (typeof this.channels[url] == 'undefined') {\n            // New channel\n            channel = webSocket(url);\n            this.channels[url] = channel;\n        } else {\n            // Exist channel\n            channel = this.channels[url];\n        }\n\n        return channel;\n    }\n\n    close(url: string): void {\n        if (typeof this.channels[url] != 'undefined') {\n            this.channels[url].complete();\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Message, message_check } from './message';\nimport { ChannelService } from \"./channel.service\";\n\n\n\nclass MessageQueue {\n    private data: Message[] = [];\n\n    len(): number {\n        return this.data.length;\n    }\n\n    isFull(): boolean {\n        return this.len() > 0;\n    }\n\n    isEmpty(): boolean {\n        return this.len() == 0;\n    }\n\n    push(msg: Message): void {\n        this.data.push(msg);\n    }\n\n    pop(): Message {\n        return this.data.pop();\n    }\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MessageService {\n\n    private sock_url = \"ws://localhost:8000/commu/\";\n    private socket: any = null;\n\n    /**\n     * With Help of msg_queues MessageService able to\n     * provide messages that from server, to another\n     * components or services.\n     *\n     *  ---- message ---> MessageService ---> queue ---> component\n     */\n    private msg_queues: { [index: string]: MessageQueue } = {};\n\n    constructor(sock: ChannelService) {\n        sock.create(this.sock_url).subscribe(\n            msg => {\n\n                if (message_check(msg) === false) {\n                    // invalid message\n                    return;\n                }\n\n                let message: Message = {\n                    \"type\": msg[\"type\"],\n                    \"content\": msg[\"content\"]\n                };\n                let msg_type: string = message.type;\n\n                // If type of thie message is subscribe then add it to\n                // correspond queue.\n                if (typeof this.msg_queues[msg_type] != 'undefined') {\n                    this.msg_queues[message.type].push(message);\n                }\n            },\n            err => {\n                console.log(err);\n            },\n            () => {\n                console.log(\"complete\");\n            }\n        );\n    }\n\n    register(msg_type: string): Observable<Message> | null {\n        // To check that is this msg_type is unique.\n        if (typeof this.msg_queues[msg_type] == \"undefined\")\n            this.msg_queues[msg_type] = new MessageQueue();\n        else\n            return null;\n\n        return new Observable(msg_receiver => {\n            setInterval(() => {\n                let q: MessageQueue = this.msg_queues[msg_type];\n                while (!q.isEmpty()) {\n                    msg_receiver.next(q.pop());\n                }\n            }, 3000);\n        });\n    }\n\n}\n","export interface Message {\n    type: string;\n    content: { [index: string]: any };\n}\n\nexport function message_check(msg: any): boolean {\n    if (typeof msg == 'object') {\n        if (typeof msg['type'] != 'undefined' ||\n            typeof msg['content'] != 'undefined') {\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MessageService } from '../message.service';\nimport { Message } from '../message';\n\ninterface Task {\n    taskid: string;\n    state: string;\n}\n\ninterface Job {\n    jobid: string;\n    tasks: { [index: string]: Task };\n}\n\n\n@Component({\n    selector: 'app-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.component.css']\n})\nexport class ProgressBarComponent implements OnInit {\n\n    jobs: { [index: string]: Job } = {};\n\n    constructor(msg_service: MessageService) {\n        msg_service.register(\"JobMsg\").subscribe(msg => {\n            this.job_state_message_handle(msg);\n        });\n    }\n\n    ngOnInit(): void { }\n\n    job_state_message_handle(msg: Message): void {\n        let content = msg.content;\n        let subtype: string;\n\n        // Corrupted by invalid format of message is\n        // not allowed.\n        try {\n            subtype = content['subtype'];\n\n            switch (subtype) {\n                case \"change\":\n                    this.job_state_message_change_handle(msg);\n                    break;\n                case \"fin\":\n                    this.job_state_message_fin_handle(msg);\n                    break;\n                case \"fail\":\n                    this.job_state_message_fail_handle(msg)\n                    break;\n                case \"info\":\n                    this.job_state_message_info_handle(msg);\n                    break;\n            }\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n\n    job_state_message_info_handle(msg: Message): void {\n        let content = msg['content']['message'];\n\n        // Create jobs from info in message.\n        for (let jobid in content) {\n            let job = { \"jobid\": jobid, tasks: content[jobid] };\n            this.jobs[jobid] = job;\n        }\n    }\n\n    job_state_message_change_handle(msg: Message): void {\n        let content = msg['content']['message'];\n        let jobid: string = content['jobid'];\n        let taskid: string = content['taskid'];\n        let state: string = content['state'];\n\n        this.jobs[jobid].tasks[taskid].state = state;\n    }\n\n    job_state_message_fin_handle(msg: Message): void {\n        let content = msg['content']['message'];\n        let jobid: string = content['jobid'];\n\n        delete this.jobs[jobid]\n    }\n\n    job_state_message_fail_handle(msg: Message): void {\n        let content = msg['content']['message'];\n        let jobid: string = content['jobid'];\n\n        delete this.jobs[jobid]\n\n    }\n}\n","<div id=\"ProgressBar\" class=\"mat-elevation-z5\">\n  <h3>ProgressBar</h3>\n  <p>{{jobs}}</p>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Revision } from './revision';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RevisionService {\n\n    private revUrl = 'manager/api/revisions';\n\n    constructor(private http: HttpClient) { }\n\n    getRevision(sn: string): Observable<Revision> {\n        const url = `${this.revUrl}/${sn}`;\n        return this.http.get<Revision>(url);\n    }\n\n    getRevisions(): Observable<Revision[]> {\n        return this.http.get<Revision[]>(this.revUrl);\n    }\n\n    getSomeRevs(sn: string | null, num: number): Observable<Revision[]> {\n        const url: string = sn != null ? `${this.revUrl}/${sn}/getSomeRevsFrom` :\n            `${this.revUrl}/getSomeRevs`;\n        const options = { params: { num: `${num}` } };\n        return this.http.get<Revision[]>(url, options);\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { VersionService } from '../version.service';\nimport { RevisionService } from '../revision.service';\nimport { Version, VersionBuild, BuildInfo } from '../version';\nimport { Revision } from '../revision';\n\n\n@Component({\n    selector: 'app-ver-gen',\n    templateUrl: './ver-gen.component.html',\n    styleUrls: ['./ver-gen.component.css']\n})\nexport class VerGenComponent implements OnInit {\n\n    versions: Version[] = [];\n    revisions: Revision[] = [];\n\n    constructor(\n        private verService: VersionService,\n        private revService: RevisionService\n    ) { }\n\n    ngOnInit(): void {\n        this.verService.getVersions()\n            .subscribe(versions => this.versions = versions);\n        this.revService.getRevisions()\n            .subscribe(revisions => this.revisions = revisions);\n    }\n\n    generate(version: Version | undefined, ...infos: string[]): void {\n        let buildInfo: BuildInfo = {};\n\n        if (typeof version !== 'undefined') {\n\n            if (infos.length === 2) {\n                buildInfo = { logFrom: infos[0], logTo: infos[1] };\n            }\n\n            const build: VersionBuild = { ver: version, info: buildInfo };\n            this.verService.generate(build).subscribe();\n        }\n    }\n}\n","<div id=\"VerGenPanel\" class=\"mat-elevation-z5\">\n    <h3>Version Generate</h3>\n\n    <mat-list>\n\n      <mat-list-item>\n        <mat-form-field>\n          <mat-label>Version</mat-label>\n          <mat-select #SelectedVersion>\n            <mat-option *ngFor=\"let version of versions\" [value]=\"version\">\n              {{version.vsn}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-list-item>\n\n      <mat-list-item>\n        <mat-form-field>\n          <mat-label>Log from</mat-label>\n          <mat-select #logFrom>\n            <mat-option *ngFor=\"let revision of revisions\" [value]=\"revision.sn\">\n              {{revision.sn}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-list-item>\n\n      <mat-list-item>\n        <mat-form-field>\n          <mat-label>Log from</mat-label>\n          <mat-select #logTo>\n            <mat-option *ngFor=\"let revision of revisions\" [value]=\"revision.sn\">\n              {{revision.sn}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-list-item>\n\n      <mat-list-item>\n        <button id=\"genButton\" mat-flat-button color=\"primary\"\n                (click)=\"generate(SelectedVersion.value, logFrom.value, logTo.value)\">\n          Generate\n        </button>\n      </mat-list-item>\n    </mat-list>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { VersionService } from '../version.service';\nimport { RevisionService } from '../revision.service';\nimport { Version } from '../version';\nimport { Revision } from '../revision';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'app-ver-register',\n    templateUrl: './ver-register.component.html',\n    styleUrls: ['./ver-register.component.css']\n})\nexport class VerRegisterComponent implements OnInit {\n\n    versions: Version[] = [];\n    revisions: Revision[] = [];\n\n    lastScrollTop: number = 0;\n    revList: HTMLElement | null = null;\n\n    constructor(private verService: VersionService,\n        private revService: RevisionService,\n        private dialog: MatDialog) { }\n\n    ngOnInit(): void {\n        this.getVersions();\n        this.getSomeRevs(null, 20);\n    }\n\n    register(rev: string): void {\n        const ref = this.dialog.open(RegisterDialog, {\n            width: '250px'\n        });\n\n        ref.afterClosed().subscribe(result => {\n            if (result !== undefined) {\n                const ver: Version = { vsn: result, sn: rev };\n                this.verService.addVersion(ver)\n                    .subscribe();\n            }\n        });\n    }\n\n    remove(ver: Version): void {\n        this.verService.removeVersion(ver.vsn)\n            .subscribe();\n    }\n\n    getVersions(): void {\n        this.verService.getVersions()\n            .subscribe(versions => this.versions = versions);\n    }\n\n    getRevisions(): void {\n        this.revService.getRevisions()\n            .subscribe(revisions => this.revisions = revisions);\n    }\n\n    getSomeRevs(sn: string | null, num: number): void {\n        this.revService.getSomeRevs(sn, num)\n            .subscribe(revisions => this.revisions = this.revisions.concat(revisions));\n    }\n\n    logging(msg: string): void {\n        console.log(msg);\n    }\n\n    onScroll(event: any): void {\n        // visible height + pixel scrolled >= total height\n        if (event.target.offsetHeight + event.target.scrollTop >= event.target.scrollHeight) {\n            let lastSn: Revision = this.revisions[this.revisions.length - 1];\n            this.revService.getSomeRevs(lastSn.sn, 10)\n                .subscribe(revisions => {\n                    const height: number = event.target.scrollHeight;\n                    this.revisions = this.revisions.concat(revisions);\n                });\n        }\n    }\n}\n\n@Component({\n    selector: 'register-dialog',\n    templateUrl: 'register-dialog.html'\n})\nexport class RegisterDialog {\n\n    public version: string;\n\n    constructor(\n        public dialogRef: MatDialogRef<RegisterDialog>) { }\n\n    onCancel(): void {\n        this.dialogRef.close();\n    }\n}\n","<div id=\"RegPanel\" class=\"mat-elevation-z5\">\n  <h3 class=\"registerTitle\">Version Register</h3>\n  <mat-action-list id=\"revList\" (scroll)=\"onScroll($event)\">\n    <mat-list *ngFor=\"let revision of revisions\" class=\"mat-elevation-z2\">\n      <button class=\"revButton\" (click)=\"register(revision.sn)\">\n        <a>{{revision.comment | slice: 0:40}}</a>\n      </button>\n    </mat-list>\n  </mat-action-list>\n</div>\n","<h1 mat-dialog-title>Version Register</h1>\n<div mat-dialog-content>\n  <mat-form-field>\n    <p>Version Identity?</p>\n    <input matInput [(ngModel)]=\"version\">\n  </mat-form-field>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onCancel()\">No Thanks</button>\n  <button mat-button [mat-dialog-close]=\"version\">Ok</button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Version, VersionBuild } from './version';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class VersionService {\n\n    private verUrl = 'manager/api/versions';\n\n    httpOptions = {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n    };\n\n    constructor(\n        private http: HttpClient\n    ) { }\n\n    getVersion(vsn: string): Observable<Version> {\n        const url = `${this.verUrl}/${vsn}/`;\n        return this.http.get<Version>(url);\n    }\n\n    getVersions(): Observable<Version[]> {\n        return this.http.get<Version[]>(`${this.verUrl}/`);\n    }\n\n    updateVersion(ver: Version): Observable<any> {\n        return this.http.put(`${this.verUrl}/`, ver, this.httpOptions);\n    }\n\n    removeVersion(vsn: string): Observable<Version> {\n        const url = `${this.verUrl}/${vsn}/`;\n        return this.http.delete<Version>(url, this.httpOptions);\n    }\n\n    addVersion(ver: Version): Observable<Version> {\n        return this.http.post<Version>(`${this.verUrl}/`, ver, this.httpOptions);\n    }\n\n    generate(build: VersionBuild): Observable<any> {\n        const genUrl = `${this.verUrl}/${build.ver.vsn}/generate/`;\n        return this.http.put(genUrl, build.info, this.httpOptions);\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}